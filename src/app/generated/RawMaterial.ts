/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.2
 * source: RawMaterial.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\empty";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace com.coutuapi.cost.grpc {
    export class DeleteRawMaterialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            coutuId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("coutuId" in data && data.coutuId != undefined) {
                    this.coutuId = data.coutuId;
                }
            }
        }
        get coutuId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set coutuId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            coutuId?: string;
        }): DeleteRawMaterialRequest {
            const message = new DeleteRawMaterialRequest({});
            if (data.coutuId != null) {
                message.coutuId = data.coutuId;
            }
            return message;
        }
        toObject() {
            const data: {
                coutuId?: string;
            } = {};
            if (this.coutuId != null) {
                data.coutuId = this.coutuId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.coutuId.length)
                writer.writeString(1, this.coutuId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRawMaterialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRawMaterialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.coutuId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRawMaterialRequest {
            return DeleteRawMaterialRequest.deserialize(bytes);
        }
    }
    export class DeleteRawMaterialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: string;
            message?: string;
        }): DeleteRawMaterialResponse {
            const message = new DeleteRawMaterialResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
                message?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DeleteRawMaterialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DeleteRawMaterialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DeleteRawMaterialResponse {
            return DeleteRawMaterialResponse.deserialize(bytes);
        }
    }
    export class EditRawMaterialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("coutuId" in data && data.coutuId != undefined) {
                    this.coutuId = data.coutuId;
                }
                if ("cost" in data && data.cost != undefined) {
                    this.cost = data.cost;
                }
                if ("yield" in data && data.yield != undefined) {
                    this.yield = data.yield;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get coutuId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coutuId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cost() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set cost(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get yield() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set yield(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }): EditRawMaterialRequest {
            const message = new EditRawMaterialRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.coutuId != null) {
                message.coutuId = data.coutuId;
            }
            if (data.cost != null) {
                message.cost = data.cost;
            }
            if (data.yield != null) {
                message.yield = data.yield;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                description?: string;
                coutuId?: string;
                cost?: number;
                yield?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.coutuId != null) {
                data.coutuId = this.coutuId;
            }
            if (this.cost != null) {
                data.cost = this.cost;
            }
            if (this.yield != null) {
                data.yield = this.yield;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.coutuId.length)
                writer.writeString(3, this.coutuId);
            if (this.cost != 0)
                writer.writeDouble(4, this.cost);
            if (this.yield != 0)
                writer.writeDouble(5, this.yield);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditRawMaterialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditRawMaterialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.coutuId = reader.readString();
                        break;
                    case 4:
                        message.cost = reader.readDouble();
                        break;
                    case 5:
                        message.yield = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditRawMaterialRequest {
            return EditRawMaterialRequest.deserialize(bytes);
        }
    }
    export class EditRawMaterialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("coutuId" in data && data.coutuId != undefined) {
                    this.coutuId = data.coutuId;
                }
                if ("cost" in data && data.cost != undefined) {
                    this.cost = data.cost;
                }
                if ("yield" in data && data.yield != undefined) {
                    this.yield = data.yield;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get coutuId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coutuId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cost() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set cost(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get yield() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set yield(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }): EditRawMaterialResponse {
            const message = new EditRawMaterialResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.coutuId != null) {
                message.coutuId = data.coutuId;
            }
            if (data.cost != null) {
                message.cost = data.cost;
            }
            if (data.yield != null) {
                message.yield = data.yield;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                description?: string;
                coutuId?: string;
                cost?: number;
                yield?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.coutuId != null) {
                data.coutuId = this.coutuId;
            }
            if (this.cost != null) {
                data.cost = this.cost;
            }
            if (this.yield != null) {
                data.yield = this.yield;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.coutuId.length)
                writer.writeString(3, this.coutuId);
            if (this.cost != 0)
                writer.writeDouble(4, this.cost);
            if (this.yield != 0)
                writer.writeDouble(5, this.yield);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EditRawMaterialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EditRawMaterialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.coutuId = reader.readString();
                        break;
                    case 4:
                        message.cost = reader.readDouble();
                        break;
                    case 5:
                        message.yield = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EditRawMaterialResponse {
            return EditRawMaterialResponse.deserialize(bytes);
        }
    }
    export class RawMaterialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("coutuId" in data && data.coutuId != undefined) {
                    this.coutuId = data.coutuId;
                }
                if ("cost" in data && data.cost != undefined) {
                    this.cost = data.cost;
                }
                if ("yield" in data && data.yield != undefined) {
                    this.yield = data.yield;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get coutuId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coutuId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cost() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set cost(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get yield() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set yield(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }): RawMaterialRequest {
            const message = new RawMaterialRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.coutuId != null) {
                message.coutuId = data.coutuId;
            }
            if (data.cost != null) {
                message.cost = data.cost;
            }
            if (data.yield != null) {
                message.yield = data.yield;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                description?: string;
                coutuId?: string;
                cost?: number;
                yield?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.coutuId != null) {
                data.coutuId = this.coutuId;
            }
            if (this.cost != null) {
                data.cost = this.cost;
            }
            if (this.yield != null) {
                data.yield = this.yield;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.coutuId.length)
                writer.writeString(3, this.coutuId);
            if (this.cost != 0)
                writer.writeDouble(4, this.cost);
            if (this.yield != 0)
                writer.writeDouble(5, this.yield);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RawMaterialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RawMaterialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.coutuId = reader.readString();
                        break;
                    case 4:
                        message.cost = reader.readDouble();
                        break;
                    case 5:
                        message.yield = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RawMaterialRequest {
            return RawMaterialRequest.deserialize(bytes);
        }
    }
    export class SaveRawMaterialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: string;
            message?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            status?: string;
            message?: string;
        }): SaveRawMaterialResponse {
            const message = new SaveRawMaterialResponse({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.message != null) {
                message.message = data.message;
            }
            return message;
        }
        toObject() {
            const data: {
                status?: string;
                message?: string;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.message != null) {
                data.message = this.message;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status.length)
                writer.writeString(1, this.status);
            if (this.message.length)
                writer.writeString(2, this.message);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SaveRawMaterialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SaveRawMaterialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readString();
                        break;
                    case 2:
                        message.message = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SaveRawMaterialResponse {
            return SaveRawMaterialResponse.deserialize(bytes);
        }
    }
    export class GetRawMaterialRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            coutuId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("coutuId" in data && data.coutuId != undefined) {
                    this.coutuId = data.coutuId;
                }
            }
        }
        get coutuId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set coutuId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            coutuId?: string;
        }): GetRawMaterialRequest {
            const message = new GetRawMaterialRequest({});
            if (data.coutuId != null) {
                message.coutuId = data.coutuId;
            }
            return message;
        }
        toObject() {
            const data: {
                coutuId?: string;
            } = {};
            if (this.coutuId != null) {
                data.coutuId = this.coutuId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.coutuId.length)
                writer.writeString(1, this.coutuId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRawMaterialRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRawMaterialRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.coutuId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRawMaterialRequest {
            return GetRawMaterialRequest.deserialize(bytes);
        }
    }
    export class GetRawMaterialResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("coutuId" in data && data.coutuId != undefined) {
                    this.coutuId = data.coutuId;
                }
                if ("cost" in data && data.cost != undefined) {
                    this.cost = data.cost;
                }
                if ("yield" in data && data.yield != undefined) {
                    this.yield = data.yield;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get description() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get coutuId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coutuId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get cost() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set cost(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get yield() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set yield(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            description?: string;
            coutuId?: string;
            cost?: number;
            yield?: number;
        }): GetRawMaterialResponse {
            const message = new GetRawMaterialResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.coutuId != null) {
                message.coutuId = data.coutuId;
            }
            if (data.cost != null) {
                message.cost = data.cost;
            }
            if (data.yield != null) {
                message.yield = data.yield;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                description?: string;
                coutuId?: string;
                cost?: number;
                yield?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.coutuId != null) {
                data.coutuId = this.coutuId;
            }
            if (this.cost != null) {
                data.cost = this.cost;
            }
            if (this.yield != null) {
                data.yield = this.yield;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.description.length)
                writer.writeString(2, this.description);
            if (this.coutuId.length)
                writer.writeString(3, this.coutuId);
            if (this.cost != 0)
                writer.writeDouble(4, this.cost);
            if (this.yield != 0)
                writer.writeDouble(5, this.yield);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRawMaterialResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRawMaterialResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.description = reader.readString();
                        break;
                    case 3:
                        message.coutuId = reader.readString();
                        break;
                    case 4:
                        message.cost = reader.readDouble();
                        break;
                    case 5:
                        message.yield = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRawMaterialResponse {
            return GetRawMaterialResponse.deserialize(bytes);
        }
    }
    export class GetAllRawMaterialsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            rawMaterials?: GetRawMaterialResponse[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("rawMaterials" in data && data.rawMaterials != undefined) {
                    this.rawMaterials = data.rawMaterials;
                }
            }
        }
        get rawMaterials() {
            return pb_1.Message.getRepeatedWrapperField(this, GetRawMaterialResponse, 1) as GetRawMaterialResponse[];
        }
        set rawMaterials(value: GetRawMaterialResponse[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            rawMaterials?: ReturnType<typeof GetRawMaterialResponse.prototype.toObject>[];
        }): GetAllRawMaterialsResponse {
            const message = new GetAllRawMaterialsResponse({});
            if (data.rawMaterials != null) {
                message.rawMaterials = data.rawMaterials.map(item => GetRawMaterialResponse.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                rawMaterials?: ReturnType<typeof GetRawMaterialResponse.prototype.toObject>[];
            } = {};
            if (this.rawMaterials != null) {
                data.rawMaterials = this.rawMaterials.map((item: GetRawMaterialResponse) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.rawMaterials.length)
                writer.writeRepeatedMessage(1, this.rawMaterials, (item: GetRawMaterialResponse) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllRawMaterialsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllRawMaterialsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.rawMaterials, () => pb_1.Message.addToRepeatedWrapperField(message, 1, GetRawMaterialResponse.deserialize(reader), GetRawMaterialResponse));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetAllRawMaterialsResponse {
            return GetAllRawMaterialsResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedRawMaterialServiceService {
        static definition = {
            SaveRawMaterial: {
                path: "/com.coutuapi.cost.grpc.RawMaterialService/SaveRawMaterial",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RawMaterialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RawMaterialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: SaveRawMaterialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => SaveRawMaterialResponse.deserialize(new Uint8Array(bytes))
            },
            GetRawMaterial: {
                path: "/com.coutuapi.cost.grpc.RawMaterialService/GetRawMaterial",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GetRawMaterialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRawMaterialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetRawMaterialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetRawMaterialResponse.deserialize(new Uint8Array(bytes))
            },
            GetAllRawMaterials: {
                path: "/com.coutuapi.cost.grpc.RawMaterialService/GetAllRawMaterials",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: dependency_1.google.protobuf.Empty) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => dependency_1.google.protobuf.Empty.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GetAllRawMaterialsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GetAllRawMaterialsResponse.deserialize(new Uint8Array(bytes))
            },
            EditRawMaterial: {
                path: "/com.coutuapi.cost.grpc.RawMaterialService/EditRawMaterial",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: EditRawMaterialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => EditRawMaterialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: EditRawMaterialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => EditRawMaterialResponse.deserialize(new Uint8Array(bytes))
            },
            DeleteRawMaterial: {
                path: "/com.coutuapi.cost.grpc.RawMaterialService/DeleteRawMaterial",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DeleteRawMaterialRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DeleteRawMaterialRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DeleteRawMaterialResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DeleteRawMaterialResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SaveRawMaterial(call: grpc_1.ServerUnaryCall<RawMaterialRequest, SaveRawMaterialResponse>, callback: grpc_1.sendUnaryData<SaveRawMaterialResponse>): void;
        abstract GetRawMaterial(call: grpc_1.ServerUnaryCall<GetRawMaterialRequest, GetRawMaterialResponse>, callback: grpc_1.sendUnaryData<GetRawMaterialResponse>): void;
        abstract GetAllRawMaterials(call: grpc_1.ServerUnaryCall<dependency_1.google.protobuf.Empty, GetAllRawMaterialsResponse>, callback: grpc_1.sendUnaryData<GetAllRawMaterialsResponse>): void;
        abstract EditRawMaterial(call: grpc_1.ServerUnaryCall<EditRawMaterialRequest, EditRawMaterialResponse>, callback: grpc_1.sendUnaryData<EditRawMaterialResponse>): void;
        abstract DeleteRawMaterial(call: grpc_1.ServerUnaryCall<DeleteRawMaterialRequest, DeleteRawMaterialResponse>, callback: grpc_1.sendUnaryData<DeleteRawMaterialResponse>): void;
    }
    export class RawMaterialServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedRawMaterialServiceService.definition, "RawMaterialService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SaveRawMaterial: GrpcUnaryServiceInterface<RawMaterialRequest, SaveRawMaterialResponse> = (message: RawMaterialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<SaveRawMaterialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<SaveRawMaterialResponse>, callback?: grpc_1.requestCallback<SaveRawMaterialResponse>): grpc_1.ClientUnaryCall => {
            return super.SaveRawMaterial(message, metadata, options, callback);
        };
        GetRawMaterial: GrpcUnaryServiceInterface<GetRawMaterialRequest, GetRawMaterialResponse> = (message: GetRawMaterialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetRawMaterialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetRawMaterialResponse>, callback?: grpc_1.requestCallback<GetRawMaterialResponse>): grpc_1.ClientUnaryCall => {
            return super.GetRawMaterial(message, metadata, options, callback);
        };
        GetAllRawMaterials: GrpcUnaryServiceInterface<dependency_1.google.protobuf.Empty, GetAllRawMaterialsResponse> = (message: dependency_1.google.protobuf.Empty, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<GetAllRawMaterialsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<GetAllRawMaterialsResponse>, callback?: grpc_1.requestCallback<GetAllRawMaterialsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAllRawMaterials(message, metadata, options, callback);
        };
        EditRawMaterial: GrpcUnaryServiceInterface<EditRawMaterialRequest, EditRawMaterialResponse> = (message: EditRawMaterialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<EditRawMaterialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<EditRawMaterialResponse>, callback?: grpc_1.requestCallback<EditRawMaterialResponse>): grpc_1.ClientUnaryCall => {
            return super.EditRawMaterial(message, metadata, options, callback);
        };
        DeleteRawMaterial: GrpcUnaryServiceInterface<DeleteRawMaterialRequest, DeleteRawMaterialResponse> = (message: DeleteRawMaterialRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DeleteRawMaterialResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DeleteRawMaterialResponse>, callback?: grpc_1.requestCallback<DeleteRawMaterialResponse>): grpc_1.ClientUnaryCall => {
            return super.DeleteRawMaterial(message, metadata, options, callback);
        };
    }
}
